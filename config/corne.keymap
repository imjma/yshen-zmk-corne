/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/*                                      42 KEY MATRIX / LAYOUT MAPPING

  ╭────────────────────────┬────────────────────────╮ ╭─────────────────────────┬─────────────────────────╮
  │  0   1   2   3   4   5 │  6   7   8   9  10  11 │ │ LT5 LT4 LT3 LT2 LT1 LT0 │ RT0 RT1 RT2 RT3 RT4 RT5 │
  │ 12  13  14  15  16  17 │ 18  19  20  21  22  23 │ │ LM5 LM4 LM3 LM2 LM1 LM0 │ RM0 RM1 RM2 RM3 RM4 RM5 │
  │ 24  25  26  27  28  29 │ 30  31  32  33  34  35 │ │ LB5 LB4 LB3 LB2 LB1 LB0 │ RB0 RB1 RB2 RB3 RB4 RB5 │
  ╰───────────╮ 36  37  38 │ 39  40  41 ╭───────────╯ ╰───────────╮ LH2 LH1 LH0 │ RH0 RH1 RH2 ╭───────────╯
              ╰────────────┴────────────╯                         ╰─────────────┴─────────────╯             */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

//#include <dt-bindings/zmk/mouse.h>
// Home row mods macro (CAGS for MacOS)

#define HRML(k1,k2,k3,k4) &thm LCTRL k1  &thm LALT k2  &thm LGUI k3  &thm LSHFT k4
#define HRMR(k1,k2,k3,k4) &thm RSHFT k1  &thm RGUI k2  &thm RALT k3  &thm RCTRL k4

/ {
    behaviors {
        thm: timerless_homerow_mods {
            label = "timerless_homerow_mods";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>; // repeat on quick tap+hold
            require-prior-idle-ms = <120>; // disable hold-tap when typing quickly, remove input delay
            bindings = <&kp>, <&kp>;

            hold-trigger-on-release; // delay positional check until key-release
        };

        mlt: my_layer_tap {
            label = "my_layer_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>; // repeat on tap-into-hold
            require-prior-idle-ms = <120>; // disable hold-tap when typing quickly, remove input delay
            bindings = <&mo>, <&kp>;

            hold-trigger-on-release; // delay positional check until key-release
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_lbkt {
            bindings = <&kp LBKT>;
            key-positions = <28 29>; // vb
            timeout-ms = <50>;
            layers = <0>;
        };

        combo_rbkt {
            bindings = <&kp RBKT>;
            key-positions = <30 31>; // nm
            timeout-ms = <50>;
            layers = <0>;
        };

        combo_lbrc {
            bindings = <&kp LBRC>;
            key-positions = <16 17>; // fg
            timeout-ms = <50>;
            layers = <0>;
        };

        combo_rbrc {
            bindings = <&kp RBRC>;
            key-positions = <18 19>; // hj
            timeout-ms = <50>;
            layers = <0>;
        };

        combo_tab_prev {
            bindings = <&kp LC(LS(TAB))>;
            key-positions = <14 15>; // sd
            timeout-ms = <50>;
            layers = <0>;
        };

        combo_tab_next {
            bindings = <&kp LC(TAB)>;
            key-positions = <15 16>; // df
            timeout-ms = <50>;
            layers = <0>;
        };

        combo_back {
            bindings = <&kp BACKSLASH>;
            key-positions = <33 34>;// ,.
            timeout-ms = <50>;
            layers = <0>;
        };

        combo_todo {
            bindings = <&todo>;
            key-positions = <17 18>; // gh
            layers = <0>;
            timeout-ms = <50>;
        };

        combo_pipe {
            bindings = <&kp PIPE>;
            key-positions = <34 35>;
        };

        combo_tilde {
            bindings = <&kp TILDE>;
            key-positions = <21 22>;
        };

        combo_lpar {
            bindings = <&kp LPAR>;
            key-positions = <4 5>;
        };

        combo_rpar {
            bindings = <&kp RPAR>;
            key-positions = <6 7>;
        };

        combo_grave {
            bindings = <&kp GRAVE>;
            key-positions = <22 23>;
        };

        combo_input {
            bindings = <&kp LA(LC(SPACE))>;
            key-positions = <0 1>;
        };
    };

    macros {
        // - [ ]

        todo: todo {
            compatible = "zmk,behavior-macro";
            label = "TODO";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings = <&kp MINUS &kp SPACE &kp LBKT &kp SPACE &kp RBKT &kp SPACE>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB        &kp Q         &kp W        &kp E         &kp R         &kp T        &kp Y              &kp U         &kp I           &kp O        &kp P            &kp BSPC
&mt LCTRL ESC  &thm LCTRL A  &thm LALT S  &thm LGUI D   &thm LSHFT F  &kp G        &kp H              &thm RSHFT J  &thm RGUI K     &thm RALT L  &thm RCTRL SEMI  &kp SQT
&kp LSHFT      &kp Z         &kp X        &kp C         &kp V         &kp B        &kp N              &kp M         &kp COMMA       &kp DOT      &kp FSLH         &kp BSLH
                                          &mt LGUI ESC  &mlt 1 TAB    &kp SPACE    &mt RIGHT_GUI RET  &mlt 2 BSPC   &mt LALT GRAVE
            >;
        };

        FN_NAV {
            bindings = <
&kp K_MUTE         &kp MINUS       &kp PLUS   &kp AMPS    &kp ASTRK    &kp GRAVE    &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp PLUS      &kp MINUS  &kp DELETE
&kp C_VOLUME_UP    &kp UNDER       &kp TILDE  &kp DOLLAR  &kp PERCENT  &kp CARET    &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp NUMBER_0  &kp COLON  &trans
&kp C_VOLUME_DOWN  &kp LEFT_SHIFT  &trans     &kp EXCL    &kp AT       &kp HASH     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PERIOD    &kp SLASH  &trans
                                              &kp LGUI    &trans       &kp SPACE    &kp RET       &mo 3         &trans
            >;
        };

        NUM_SYM {
            bindings = <
&trans  &trans                 &trans  &trans              &kp LS(LG(NUMBER_4))  &trans               &kp LG(GRAVE)    &kp END        &kp HOME     &trans     &trans  &kp DELETE
&trans  &kp LG(LC(LA(LEFT)))   &trans  &kp LS(LA(LC(UP)))  &kp LA(LC(LEFT))      &kp LA(LC(RIGHT))    &kp LEFT         &kp DOWN       &kp UP       &kp RIGHT  &trans  &trans
&trans  &kp LC(LA(LG(RIGHT)))  &trans  &kp LA(LC(C))       &trans                &kp LA(LC(RET))      &kp RIGHT_SHIFT  &kp PAGE_DOWN  &kp PAGE_UP  &trans     &trans  &trans
                                       &kp LGUI            &mo 3                 &kp SPACE            &kp RET          &trans         &trans
            >;
        };

        NUMPAD_BT {
            bindings = <
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &bootloader   &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &bt BT_CLR    &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
                                    &trans        &trans        &trans          &trans  &trans  &trans
            >;
        };
    };
};
