/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/*                                      42 KEY MATRIX / LAYOUT MAPPING

  ╭────────────────────────┬────────────────────────╮ ╭─────────────────────────┬─────────────────────────╮
  │  0   1   2   3   4   5 │  6   7   8   9  10  11 │ │ LT5 LT4 LT3 LT2 LT1 LT0 │ RT0 RT1 RT2 RT3 RT4 RT5 │
  │ 12  13  14  15  16  17 │ 18  19  20  21  22  23 │ │ LM5 LM4 LM3 LM2 LM1 LM0 │ RM0 RM1 RM2 RM3 RM4 RM5 │
  │ 24  25  26  27  28  29 │ 30  31  32  33  34  35 │ │ LB5 LB4 LB3 LB2 LB1 LB0 │ RB0 RB1 RB2 RB3 RB4 RB5 │
  ╰───────────╮ 36  37  38 │ 39  40  41 ╭───────────╯ ╰───────────╮ LH2 LH1 LH0 │ RH0 RH1 RH2 ╭───────────╯
              ╰────────────┴────────────╯                         ╰─────────────┴─────────────╯             */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

//#include <dt-bindings/zmk/mouse.h>
// Home row mods macro (CAGS for MacOS)

#define HRML(k1,k2,k3,k4) &thm LCTRL k1  &thm LALT k2  &thm LGUI k3  &thm LSHFT k4
#define HRMR(k1,k2,k3,k4) &thm RSHFT k1  &thm RGUI k2  &thm RALT k3  &thm RCTRL k4

/ {
    behaviors {
        thm: timerless_homerow_mods {
            label = "timerless_homerow_mods";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>; // repeat on quick tap+hold
            require-prior-idle-ms = <120>; // disable hold-tap when typing quickly, remove input delay
            bindings = <&kp>, <&kp>;

            hold-trigger-on-release; // delay positional check until key-release
        };

        mlt: my_layer_tap {
            label = "my_layer_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>; // repeat on tap-into-hold
            require-prior-idle-ms = <120>; // disable hold-tap when typing quickly, remove input delay
            bindings = <&mo>, <&kp>;

            hold-trigger-on-release; // delay positional check until key-release
        };
    };

    combos {
        compatible = "zmk,combos";

        // [

        combo_lbkt {
            bindings = <&kp LBKT>;
            key-positions = <28 29>; // vb
            timeout-ms = <50>;
            layers = <0>;
        };

        // ]

        combo_rbkt {
            bindings = <&kp RBKT>;
            key-positions = <30 31>; // nm
            timeout-ms = <50>;
            layers = <0>;
        };

        // {

        combo_lbrc {
            bindings = <&kp LBRC>;
            key-positions = <16 17>; // fg
            timeout-ms = <50>;
            layers = <0>;
        };

        // }

        combo_rbrc {
            bindings = <&kp RBRC>;
            key-positions = <18 19>; // hj
            timeout-ms = <50>;
            layers = <0>;
        };

        // C-SPC

        combo_c_spc {
            bindings = <&kp LC(SPACE)>;
            key-positions = <13 14>; // as
            timeout-ms = <50>;
            layers = <0>;
        };

        // C-S-TAB

        combo_tab_prev {
            bindings = <&kp LC(LS(TAB))>;
            key-positions = <14 15>; // sd
            timeout-ms = <50>;
            layers = <0>;
        };

        // C-TAB

        combo_tab_next {
            bindings = <&kp LC(TAB)>;
            key-positions = <15 16>; // df
            timeout-ms = <50>;
            layers = <0>;
        };

        // `

        combo_grave {
            bindings = <&kp GRAVE>;
            key-positions = <25 26>; // zx
            timeout-ms = <50>;
            layers = <0>;
        };

        // -

        combo_minus {
            bindings = <&kp MINUS>;
            key-positions = <26 27>;// xc
            timeout-ms = <50>;
            layers = <0>;
        };

        // _

        combo_under {
            bindings = <&kp UNDER>;
            key-positions = <27 28>;// cv
            timeout-ms = <50>;
            layers = <0>;
        };

        // =

        combo_equal {
            bindings = <&kp EQUAL>;
            key-positions = <31 32>;// m,
            timeout-ms = <50>;
            layers = <0>;
        };

        // +

        combo_plus {
            bindings = <&kp PLUS>;
            key-positions = <32 33>;// ,.
            timeout-ms = <50>;
            layers = <0>;
        };

        // ~

        combo_tilde {
            bindings = <&kp TILDE>;
            key-positions = <33 34>;// ,.
            timeout-ms = <50>;
            layers = <0>;
        };

        // combos for macros
        // - [ ]

        combo_todo {
            bindings = <&todo>;
            key-positions = <17 18>; // gh
            layers = <0>;
            timeout-ms = <50>;
        };

        combo_copy {
            bindings = <&none>;
            key-positions = <27 15>;
        };

        combo_paste {
            bindings = <&none>;
            key-positions = <28 16>;
        };
    };

    macros {
        // - [ ]

        todo: todo {
            compatible = "zmk,behavior-macro";
            label = "TODO";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings = <&kp MINUS &kp SPACE &kp LBKT &kp SPACE &kp RBKT &kp SPACE>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB     |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I   |  O    |  P    | BKSP |
            // | CTRL/ESC |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K   |  L    |  ; :  |  ' " |
            // | SHIFT    |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  , < |  . >  |  / ?  |  \ | |
            //                        | GUI | MO1 | SPC |   | ENT | MO2  | MO4  |

            bindings = <
&kp TAB        &kp Q         &kp W        &kp E         &kp R         &kp T        &kp Y    &kp U         &kp I         &kp O        &kp P            &kp BSPC
&mt LCTRL ESC  &thm LCTRL A  &thm LALT S  &thm LGUI D   &thm LSHFT F  &kp G        &kp H    &thm RSHFT J  &thm RGUI K   &thm RALT L  &thm RCTRL SEMI  &kp SQT
&kp LSHFT      &kp Z         &kp X        &kp C         &kp V         &kp B        &kp N    &kp M         &kp COMMA     &kp DOT      &kp FSLH         &kp BSLH
                                          &mt LGUI ESC  &mlt 1 TAB    &kp SPACE    &kp RET  &mlt 2 BSPC   &mt LALT SQT
            >;
        };

        FN_NAV {
            // -----------------------------------------------------------------------------------------
            // | CAPS | F1     | F2     | F3   | F4     | F5     |    | F6  | F7  | F8    | F9    | F10 | DEL |
            // | CTRL | VOL_UP | VOL_DN | MUTE | BRI_UP | BRI_DN |    | LFT | DWN | UP    | RGT   | F11 |     |
            // | SHIFT | PREV   | NEXT  | PLAY | BT_PRV | BT_NXT |    | HME | END | PG_UP | PG_DN | F12 |     |
            //                          | GUI  |        | ENT    |    | SPC | MO3 |     |

            bindings = <
&kp CAPSLOCK  &kp F1           &kp F2        &kp F3      &kp F4                &kp F5                  &kp F6     &kp F7    &kp F8     &kp F9     &kp F10  &kp DELETE
&kp LCTRL     &kp C_VOLUME_UP  &kp C_VOL_DN  &kp K_MUTE  &kp C_BRIGHTNESS_INC  &kp C_BRIGHTNESS_DEC    &kp LEFT   &kp DOWN  &kp UP     &kp RIGHT  &kp F11  &trans
&kp LSHFT     &kp C_PREV       &kp C_NEXT    &kp C_PLAY  &trans                &trans                  &kp HOME   &kp END   &kp PG_UP  &kp PG_DN  &kp F12  &trans
                                             &kp LGUI    &trans                &kp RETURN              &kp SPACE  &mo 3     &trans
            >;
        };

        NUM_SYM {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | CTRL |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |      |
            // | SHIFT|  `  |  -  |  _  |  \  |  |  |   |  '  |  "  |  =  |  +  |  ~  |      |
            //                    | GUI | MO3 | SPC |   | ENT |     |     |

            bindings = <
&kp TAB    &kp N1     &kp N2     &kp N3     &kp N4    &kp N5       &kp N6     &kp N7    &kp N8     &kp N9    &kp N0     &kp BSPC
&kp LCTRL  &kp EXCL   &kp AT     &kp HASH   &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS  &kp ASTRK  &kp LPAR  &kp RPAR   &trans
&kp LSHFT  &kp GRAVE  &kp MINUS  &kp UNDER  &kp BSLH  &kp PIPE     &kp SQT    &kp DQT   &kp EQUAL  &kp PLUS  &kp TILDE  &trans
                                 &kp LGUI   &mo 3     &kp SPACE    &kp RET    &trans    &trans
            >;
        };

        NUMPAD_BT {
            // -----------------------------------------------------------------------------------------
            // |   | RESET  |  7  |  8  |  9  |     |   | BT0   | BT1   | BT2      | BT3        | BT4 |    |
            // |   | BTLDR  |  4  |  5  |  6  |  0  |   | M_LFT | M_DWN | M_UP     | M_RGT      |     |    |
            // |   | BT_CLR |  1  |  2  |  3  |     |   |  MB1  |  MB2  | WHEEL_UP | WHEEL_DOWN |     |    |
            //                    | GUI |     | SPC |   | ENTER |       |          |

            bindings = <
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &kp N7  &kp N8  &kp N9  &trans  &trans
&trans  &bootloader   &trans        &trans        &trans        &trans          &trans  &kp N4  &kp N5  &kp N6  &kp N0  &trans
&trans  &bt BT_CLR    &trans        &trans        &trans        &trans          &trans  &kp N1  &kp N2  &kp N3  &trans  &trans
                                    &trans        &trans        &trans          &trans  &trans  &trans
            >;
        };
    };
};
